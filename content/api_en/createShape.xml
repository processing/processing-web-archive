<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<root>
<name>createShape()</name>

<!-- unsupported_modes>js</unsupported_modes -->
<!-- js_mode><description>This part of the Processing API is not supported in JavaScript mode</description></js_mode -->

<category>Shape</category>

<subcategory></subcategory>

<type></type>

<example>
<image></image>
<code><![CDATA[
PShape square;  // The PShape object

void setup() {
  size(100, 100, P2D);
  // Creating the PShape as a square. The
  // numeric arguments are similar to rect().
  square = createShape(RECT, 0, 0, 50, 50);
  square.setFill(color(0, 0, 255));
  square.setStroke(false);
}

void draw() {
  shape(square, 25, 25);
}
]]></code>
</example>

<example>
<image></image>
<code><![CDATA[
PShape s;  // The PShape object

void setup() {
  size(100, 100, P2D);
  // Creating a custom PShape as a square, by
  // specifying a series of vertices.
  s = createShape();
  s.beginShape();
  s.fill(0, 0, 255);
  s.noStroke();
  s.vertex(0, 0);
  s.vertex(0, 50);
  s.vertex(50, 50);
  s.vertex(50, 0);
  s.endShape(CLOSE);
}

void draw() {
  shape(s, 25, 25);
}
]]></code>
</example>

<example>
<image></image>
<code><![CDATA[
PShape s;

void setup() {
  size(100, 100, P2D);
  s = createShape();
  s.beginShape(TRIANGLE_STRIP);
  s.vertex(30, 75);
  s.vertex(40, 20);
  s.vertex(50, 75);
  s.vertex(60, 20);
  s.vertex(70, 75);
  s.vertex(80, 20);
  s.vertex(90, 75);
  s.endShape();
}

void draw() {
  shape(s, 0, 0);
}
]]></code>
</example>

<example>
<image></image>
<code><![CDATA[
PShape alien, head, body;

void setup() {
  size(100, 100, P2D);

  // Create the shape group
  alien = createShape(GROUP);

  // Make two shapes
  head = createShape(ELLIPSE, -25, 0, 50, 50);
  head.setFill(color(255));
  body = createShape(RECT, -25, 45, 50, 40);
  body.setFill(color(0));

  // Add the two "child" shapes to the parent group
  alien.addChild(body);
  alien.addChild(head);
}

void draw() {
  background(204);
  translate(50, 15);
  shape(alien); // Draw the group
}
]]></code>
</example>


<description><![CDATA[
The <b>createShape()</b> function is used to define a new shape. Once created, this shape can be drawn with the <b>shape()</b> function. The basic way to use the function defines new primitive shapes. One of the following parameters are used as the first parameter: <b>ELLIPSE</b>, <b>RECT</b>, <b>ARC</b>, <b>TRIANGLE</b>, <b>SPHERE</b>, <b>BOX</b>, <b>QUAD</b>, <b>LINE</b>. The parameters for each of these different shapes are the same as their corrsponding functions: <b>ellipse()</b>, <b>rect()</b>, <b>arc()</b>, <b>triangle()</b>, <b>sphere()</b>, <b>box()</b>, and <b>line()</b>. The first example above clarifies how this works.<br />
<br />
Custom, unique shapes can be made by using <b>createShape()</b> without a parameter. After the shape is started, the drawing attributes and geometry can be set directly to the shape within the <b>beginShape()</b> and <b>endShape()</b> methods. See the second example above for specifics.<br />
<br />
Geometry that groups vertices to build larger forms, such as group of triangles, can be created with parameters to <b>beginShape()</b>. These options are <b>POINTS</b>, <b>LINES</b>, <b>TRIANGLES</b>, <b>TRIANGLE_FAN</b>, <b>TRIANGLE_STRIP</b>, <b>QUADS</b>, and <b>QUAD_STRIP</b>. See the third example above.<br />
<br />
The  <b>createShape()</b> function can also be used to make a complex shape made of other shapes. This is called a "group" and it's created by using the parameter <b>GROUP</b> as the first parameter. See the fourth example above to see how it works.<br />
<br />
When a shape is first created inside the <b>beingShape()</b> and <b>endShape()</b> methods, the normal Processing style functions like <b>fill()</b> and <b>stroke()</b> are used to define the drawing attributes. However, after a shape is created, a different set of functions needs to be used. These include the setFill() and setStroke() functions shown in the examples above. The complete list of methods and fields for the PShape class are in the <a href="http://processing.org/reference/javadoc/core/">Processing Javadoc</a>.
]]></description>

</root>
